#!/usr/bin/env python3
"""
Backend API Testing for RoyalCert Template Upload System - FORM and REPORT Types
Tests the updated template upload system that handles FORM and REPORT types for the same equipment
Focus: Testing Word document parsing with equipment_type and template_type separation
"""

import requests
import json
import pandas as pd
import io
import os
from datetime import datetime

# Configuration
BACKEND_URL = "https://405a5b7a-3c02-4793-9fcc-5203d2944620.preview.emergentagent.com/api"
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "admin123"

class TemplateUploadTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_info = None
        self.forklift_form_url = "https://customer-assets.emergentagent.com/job_periodic-check/artifacts/y9b9lejo_RC-M-%C4%B0E-FR24_5%20FORKL%C4%B0FT%20MUAYENE%20FORMU.docx"
        self.forklift_report_url = "https://customer-assets.emergentagent.com/job_periodic-check/artifacts/00vmxy69_RC-M-%C4%B0E-FR25_6%20FORKL%C4%B0FT%20MUAYENE%20RAPORU.docx"
        
    def authenticate(self):
        """Authenticate with admin credentials"""
        print("üîê Testing Authentication...")
        
        login_data = {
            "username": ADMIN_USERNAME,
            "password": ADMIN_PASSWORD
        }
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            print(f"Login Response Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                self.token = data["access_token"]
                self.user_info = data["user"]
                
                # Set authorization header for future requests
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}"
                })
                
                print(f"‚úÖ Authentication successful")
                print(f"   User: {self.user_info['full_name']} ({self.user_info['role']})")
                return True
            else:
                print(f"‚ùå Authentication failed: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Authentication error: {str(e)}")
            return False

    def clean_existing_forklift_templates(self):
        """Clean up existing FORKLIFT templates to test new logic"""
        print("\nüßπ Cleaning up existing FORKLIFT templates...")
        
        try:
            # Get all templates
            response = self.session.get(f"{BACKEND_URL}/equipment-templates")
            if response.status_code != 200:
                print(f"‚ùå Failed to get templates: {response.text}")
                return False
            
            templates = response.json()
            forklift_templates = [t for t in templates if t.get('equipment_type') == 'FORKLIFT']
            
            print(f"   Found {len(forklift_templates)} existing FORKLIFT templates")
            
            # Delete each FORKLIFT template
            deleted_count = 0
            for template in forklift_templates:
                template_id = template.get('id')
                if template_id:
                    delete_response = self.session.delete(f"{BACKEND_URL}/equipment-templates/{template_id}")
                    if delete_response.status_code == 200:
                        deleted_count += 1
                        print(f"   ‚úÖ Deleted template: {template.get('name', template_id)}")
                    else:
                        print(f"   ‚ö†Ô∏è  Failed to delete template {template_id}: {delete_response.text}")
            
            print(f"‚úÖ Cleanup complete: {deleted_count} FORKLIFT templates deleted")
            return True
            
        except Exception as e:
            print(f"‚ùå Cleanup error: {str(e)}")
            return False

    def download_test_document(self, url, filename):
        """Download test document from URL"""
        try:
            print(f"   Downloading {filename}...")
            response = requests.get(url, timeout=30)
            if response.status_code == 200:
                print(f"   ‚úÖ Downloaded {filename} ({len(response.content)} bytes)")
                return response.content
            else:
                print(f"   ‚ùå Failed to download {filename}: {response.status_code}")
                return None
        except Exception as e:
            print(f"   ‚ùå Download error for {filename}: {str(e)}")
            return None

    def test_forklift_form_upload(self):
        """Test uploading FORKLIFT MUAYENE FORMU document"""
        print("\nüìÑ Testing FORKLIFT MUAYENE FORMU Upload...")
        
        # Download the document
        file_content = self.download_test_document(self.forklift_form_url, "FORKLIFT_MUAYENE_FORMU.docx")
        if not file_content:
            return False, None
        
        try:
            # Prepare file for upload
            files = {
                'file': ('FORKLIFT_MUAYENE_FORMU.docx', file_content, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
            }
            
            # Upload template
            response = self.session.post(f"{BACKEND_URL}/equipment-templates/upload", files=files)
            print(f"Upload Response Status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ FORKLIFT FORM upload successful")
                print(f"   Template ID: {result['template']['id']}")
                print(f"   Name: {result['template']['name']}")
                print(f"   Equipment Type: {result['template']['equipment_type']}")
                print(f"   Template Type: {result['template'].get('template_type', 'Not specified')}")
                print(f"   Total Items: {result['template']['total_items']}")
                print(f"   Categories: {result['template']['categories']}")
                
                # Verify expected values
                template = result['template']
                if template['equipment_type'] == 'FORKLIFT' and template.get('template_type') == 'FORM':
                    print("‚úÖ Template structure correct: FORKLIFT + FORM")
                    return True, template
                else:
                    print(f"‚ùå Template structure incorrect: {template['equipment_type']} + {template.get('template_type')}")
                    return False, template
            else:
                print(f"‚ùå FORKLIFT FORM upload failed: {response.text}")
                return False, None
                
        except Exception as e:
            print(f"‚ùå FORKLIFT FORM upload error: {str(e)}")
            return False, None

    def test_forklift_report_upload(self):
        """Test uploading FORKLIFT MUAYENE RAPORU document"""
        print("\nüìä Testing FORKLIFT MUAYENE RAPORU Upload...")
        
        # Download the document
        file_content = self.download_test_document(self.forklift_report_url, "FORKLIFT_MUAYENE_RAPORU.docx")
        if not file_content:
            return False, None
        
        try:
            # Prepare file for upload
            files = {
                'file': ('FORKLIFT_MUAYENE_RAPORU.docx', file_content, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
            }
            
            # Upload template
            response = self.session.post(f"{BACKEND_URL}/equipment-templates/upload", files=files)
            print(f"Upload Response Status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ FORKLIFT REPORT upload successful")
                print(f"   Template ID: {result['template']['id']}")
                print(f"   Name: {result['template']['name']}")
                print(f"   Equipment Type: {result['template']['equipment_type']}")
                print(f"   Template Type: {result['template'].get('template_type', 'Not specified')}")
                print(f"   Total Items: {result['template']['total_items']}")
                print(f"   Categories: {result['template']['categories']}")
                
                # Verify expected values
                template = result['template']
                if template['equipment_type'] == 'FORKLIFT' and template.get('template_type') == 'REPORT':
                    print("‚úÖ Template structure correct: FORKLIFT + REPORT")
                    return True, template
                else:
                    print(f"‚ùå Template structure incorrect: {template['equipment_type']} + {template.get('template_type')}")
                    return False, template
            else:
                print(f"‚ùå FORKLIFT REPORT upload failed: {response.text}")
                return False, None
                
        except Exception as e:
            print(f"‚ùå FORKLIFT REPORT upload error: {str(e)}")
            return False, None

    def test_duplicate_form_upload(self):
        """Test uploading the same FORM twice - should fail on second attempt"""
        print("\nüîÑ Testing Duplicate FORM Upload Prevention...")
        
        # Download the document
        file_content = self.download_test_document(self.forklift_form_url, "FORKLIFT_MUAYENE_FORMU_DUPLICATE.docx")
        if not file_content:
            return False
        
        try:
            # Prepare file for upload
            files = {
                'file': ('FORKLIFT_MUAYENE_FORMU_DUPLICATE.docx', file_content, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
            }
            
            # Upload template (should fail)
            response = self.session.post(f"{BACKEND_URL}/equipment-templates/upload", files=files)
            print(f"Duplicate Upload Response Status: {response.status_code}")
            
            if response.status_code == 400:
                print("‚úÖ Duplicate FORM upload correctly prevented")
                print(f"   Error message: {response.json().get('detail', 'No detail')}")
                return True
            elif response.status_code == 200:
                print("‚ùå Duplicate FORM upload should have been prevented but succeeded")
                return False
            else:
                print(f"‚ùå Unexpected response for duplicate upload: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Duplicate FORM upload test error: {str(e)}")
            return False

    def test_duplicate_report_upload(self):
        """Test uploading the same REPORT twice - should fail on second attempt"""
        print("\nüîÑ Testing Duplicate REPORT Upload Prevention...")
        
        # Download the document
        file_content = self.download_test_document(self.forklift_report_url, "FORKLIFT_MUAYENE_RAPORU_DUPLICATE.docx")
        if not file_content:
            return False
        
        try:
            # Prepare file for upload
            files = {
                'file': ('FORKLIFT_MUAYENE_RAPORU_DUPLICATE.docx', file_content, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
            }
            
            # Upload template (should fail)
            response = self.session.post(f"{BACKEND_URL}/equipment-templates/upload", files=files)
            print(f"Duplicate Upload Response Status: {response.status_code}")
            
            if response.status_code == 400:
                print("‚úÖ Duplicate REPORT upload correctly prevented")
                print(f"   Error message: {response.json().get('detail', 'No detail')}")
                return True
            elif response.status_code == 200:
                print("‚ùå Duplicate REPORT upload should have been prevented but succeeded")
                return False
            else:
                print(f"‚ùå Unexpected response for duplicate upload: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Duplicate REPORT upload test error: {str(e)}")
            return False

    def test_template_database_storage(self):
        """Verify templates are stored correctly in database"""
        print("\nüíæ Testing Template Database Storage...")
        
        try:
            # Get all templates
            response = self.session.get(f"{BACKEND_URL}/equipment-templates")
            print(f"Get Templates Status: {response.status_code}")
            
            if response.status_code == 200:
                templates = response.json()
                forklift_templates = [t for t in templates if t.get('equipment_type') == 'FORKLIFT']
                
                print(f"‚úÖ Templates retrieved successfully")
                print(f"   Total templates: {len(templates)}")
                print(f"   FORKLIFT templates: {len(forklift_templates)}")
                
                # Check for both FORM and REPORT
                form_template = next((t for t in forklift_templates if t.get('template_type') == 'FORM'), None)
                report_template = next((t for t in forklift_templates if t.get('template_type') == 'REPORT'), None)
                
                results = {
                    'form_found': form_template is not None,
                    'report_found': report_template is not None,
                    'same_equipment_type': True,
                    'different_template_types': True
                }
                
                if form_template:
                    print(f"   ‚úÖ FORM template found: {form_template.get('name')}")
                    print(f"      ID: {form_template.get('id')}")
                    print(f"      Equipment Type: {form_template.get('equipment_type')}")
                    print(f"      Template Type: {form_template.get('template_type')}")
                else:
                    print("   ‚ùå FORM template not found")
                    results['form_found'] = False
                
                if report_template:
                    print(f"   ‚úÖ REPORT template found: {report_template.get('name')}")
                    print(f"      ID: {report_template.get('id')}")
                    print(f"      Equipment Type: {report_template.get('equipment_type')}")
                    print(f"      Template Type: {report_template.get('template_type')}")
                else:
                    print("   ‚ùå REPORT template not found")
                    results['report_found'] = False
                
                # Verify both have same equipment_type but different template_types
                if form_template and report_template:
                    if (form_template.get('equipment_type') == report_template.get('equipment_type') == 'FORKLIFT' and
                        form_template.get('template_type') != report_template.get('template_type')):
                        print("‚úÖ Templates correctly stored with same equipment_type but different template_types")
                    else:
                        print("‚ùå Template structure incorrect")
                        results['same_equipment_type'] = False
                        results['different_template_types'] = False
                
                return all(results.values()), results
            else:
                print(f"‚ùå Failed to get templates: {response.text}")
                return False, None
                
        except Exception as e:
            print(f"‚ùå Database storage test error: {str(e)}")
            return False, None

    def test_template_names_formatting(self):
        """Test that template names are properly formatted"""
        print("\nüìù Testing Template Name Formatting...")
        
        try:
            # Get all templates
            response = self.session.get(f"{BACKEND_URL}/equipment-templates")
            if response.status_code != 200:
                print(f"‚ùå Failed to get templates: {response.text}")
                return False
            
            templates = response.json()
            forklift_templates = [t for t in templates if t.get('equipment_type') == 'FORKLIFT']
            
            expected_names = {
                'FORM': 'FORKLIFT MUAYENE FORMU',
                'REPORT': 'FORKLIFT MUAYENE RAPORU'
            }
            
            name_check_results = {}
            
            for template in forklift_templates:
                template_type = template.get('template_type')
                template_name = template.get('name')
                expected_name = expected_names.get(template_type)
                
                if expected_name and template_name == expected_name:
                    print(f"   ‚úÖ {template_type} name correct: {template_name}")
                    name_check_results[template_type] = True
                else:
                    print(f"   ‚ùå {template_type} name incorrect: {template_name} (expected: {expected_name})")
                    name_check_results[template_type] = False
            
            all_names_correct = all(name_check_results.values()) if name_check_results else False
            
            if all_names_correct:
                print("‚úÖ All template names properly formatted")
            else:
                print("‚ùå Some template names incorrectly formatted")
            
            return all_names_correct
            
        except Exception as e:
            print(f"‚ùå Template name formatting test error: {str(e)}")
            return False

    def run_template_upload_tests(self):
        """Run all template upload system tests"""
        print("üöÄ Starting Template Upload System Tests - FORM and REPORT Types")
        print("=" * 80)
        
        test_results = {}
        
        # Authentication test
        test_results['authentication'] = self.authenticate()
        
        if not test_results['authentication']:
            print("\n‚ùå Cannot proceed without authentication")
            return test_results
        
        # Clean up existing templates
        test_results['cleanup_existing_templates'] = self.clean_existing_forklift_templates()
        
        # Test uploading FORM document
        form_success, form_template = self.test_forklift_form_upload()
        test_results['forklift_form_upload'] = form_success
        
        # Test uploading REPORT document
        report_success, report_template = self.test_forklift_report_upload()
        test_results['forklift_report_upload'] = report_success
        
        # Test duplicate prevention
        test_results['duplicate_form_prevention'] = self.test_duplicate_form_upload()
        test_results['duplicate_report_prevention'] = self.test_duplicate_report_upload()
        
        # Test database storage
        storage_success, storage_results = self.test_template_database_storage()
        test_results['database_storage'] = storage_success
        
        # Test template name formatting
        test_results['template_name_formatting'] = self.test_template_names_formatting()
        
        # Summary
        print("\n" + "=" * 80)
        print("üìã TEMPLATE UPLOAD SYSTEM TEST SUMMARY")
        print("=" * 80)
        
        passed = 0
        total = len(test_results)
        
        for test_name, result in test_results.items():
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{test_name.replace('_', ' ').title():<40} {status}")
            if result:
                passed += 1
        
        print(f"\nOverall Result: {passed}/{total} tests passed")
        
        # Detailed Analysis
        print("\n" + "=" * 80)
        print("üìä DETAILED ANALYSIS")
        print("=" * 80)
        
        if test_results.get('forklift_form_upload') and test_results.get('forklift_report_upload'):
            print("‚úÖ CORE FUNCTIONALITY WORKING:")
            print("   ‚Ä¢ Both FORM and REPORT documents successfully uploaded")
            print("   ‚Ä¢ Same equipment_type (FORKLIFT) with different template_types")
            print("   ‚Ä¢ Word document parsing working correctly")
            print("   ‚Ä¢ Template structure properly identified")
        
        if test_results.get('duplicate_form_prevention') and test_results.get('duplicate_report_prevention'):
            print("‚úÖ DUPLICATE PREVENTION WORKING:")
            print("   ‚Ä¢ Same FORM upload correctly prevented")
            print("   ‚Ä¢ Same REPORT upload correctly prevented")
            print("   ‚Ä¢ System properly distinguishes between template types")
        
        if test_results.get('database_storage'):
            print("‚úÖ DATABASE STORAGE WORKING:")
            print("   ‚Ä¢ Templates stored with correct structure")
            print("   ‚Ä¢ GET /api/equipment-templates returns both templates")
            print("   ‚Ä¢ Templates properly categorized by type")
        
        if passed >= 6:  # Most tests passing
            print("\nüéâ TEMPLATE UPLOAD SYSTEM FULLY FUNCTIONAL!")
            print("‚úÖ The updated system correctly handles FORM and REPORT types for the same equipment")
            print("‚úÖ User concern about having one equipment type with two document types is resolved")
        else:
            print(f"\n‚ö†Ô∏è  {total - passed} issue(s) need to be resolved.")
        
        return test_results

if __name__ == "__main__":
    tester = TemplateUploadTester()
    results = tester.run_template_upload_tests()